version: '3.8'

services:
  # PostgreSQL - Primary Database
  postgres:
    image: postgres:16-alpine
    container_name: vextrus-postgres
    environment:
      POSTGRES_USER: vextrus
      POSTGRES_PASSWORD: vextrus_dev_2024
      POSTGRES_DB: vextrus_erp
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - vextrus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vextrus -d vextrus_erp"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Caching and Sessions
  redis:
    image: redis:7-alpine
    container_name: vextrus-redis
    command: redis-server --appendonly yes --requirepass vextrus_redis_2024
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - vextrus-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "vextrus_redis_2024", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper - Kafka Dependency (internal only)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: vextrus-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - vextrus-network

  # Kafka - Event Streaming
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: vextrus-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - vextrus-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "kafka:9093"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Kafka UI - For Development
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: vextrus-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8085:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: vextrus-local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - vextrus-network

  # MinIO - S3-compatible Object Storage
  minio:
    image: minio/minio:latest
    container_name: vextrus-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: vextrus_admin
      MINIO_ROOT_PASSWORD: vextrus_minio_2024
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - vextrus-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Auth Service
  auth:
    build:
      context: .
      dockerfile: ./infrastructure/docker/services/node-service-optimized.Dockerfile
      args:
        SERVICE_NAME: "@vextrus/auth-service"
        SERVICE_PATH: services/auth
        SERVICE_PORT: 3001
    container_name: vextrus-auth
    environment:
      NODE_ENV: development
      APP_PORT: 3001
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: vextrus
      DATABASE_PASSWORD: vextrus_dev_2024
      DATABASE_NAME: vextrus_erp
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: vextrus_redis_2024
      KAFKA_BROKERS: kafka:9093
      JWT_ACCESS_SECRET: vextrus_jwt_access_secret_dev_2024
      JWT_ACCESS_EXPIRES_IN: 15m
      JWT_REFRESH_SECRET: vextrus_jwt_refresh_secret_dev_2024
      JWT_REFRESH_EXPIRES_IN: 7d
    ports:
      - "3001:3001"
    networks:
      - vextrus-network
    depends_on:
      - postgres
      - redis
      - kafka
    restart: unless-stopped

  # Master Data Service
  master-data:
    build:
      context: .
      dockerfile: ./infrastructure/docker/services/node-service-optimized.Dockerfile
      args:
        SERVICE_NAME: "@vextrus/master-data"
        SERVICE_PATH: services/master-data
        SERVICE_PORT: 3010
    container_name: vextrus-master-data
    environment:
      NODE_ENV: development
      APP_PORT: 3010
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: vextrus
      DATABASE_PASSWORD: vextrus_dev_2024
      DATABASE_NAME: vextrus_master_data
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: vextrus_redis_2024
      KAFKA_BROKERS: kafka:9093
    ports:
      - "3010:3010"
    networks:
      - vextrus-network
    depends_on:
      - postgres
      - redis
      - kafka
    restart: unless-stopped

  # Workflow Service
  workflow:
    build:
      context: .
      dockerfile: ./infrastructure/docker/services/node-service-optimized.Dockerfile
      args:
        SERVICE_NAME: "@vextrus/workflow-service"
        SERVICE_PATH: services/workflow
        SERVICE_PORT: 3011
    container_name: vextrus-workflow
    environment:
      NODE_ENV: development
      APP_PORT: 3011
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: vextrus
      DATABASE_PASSWORD: vextrus_dev_2024
      DATABASE_NAME: vextrus_workflow
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: vextrus_redis_2024
      KAFKA_BROKERS: kafka:9093
      # Temporal disabled for now
      TEMPORAL_ENABLED: "false"
    ports:
      - "3011:3011"
    networks:
      - vextrus-network
    depends_on:
      - postgres
      - redis
      - kafka
    restart: unless-stopped

  # Rules Engine Service
  rules-engine:
    build:
      context: .
      dockerfile: ./infrastructure/docker/services/node-service-optimized.Dockerfile
      args:
        SERVICE_NAME: "@vextrus/rules-engine-service"
        SERVICE_PATH: services/rules-engine
        SERVICE_PORT: 3012
    container_name: vextrus-rules-engine
    environment:
      NODE_ENV: development
      APP_PORT: 3012
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: vextrus
      DATABASE_PASSWORD: vextrus_dev_2024
      DATABASE_NAME: vextrus_rules_engine
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: vextrus_redis_2024
      KAFKA_BROKERS: kafka:9093
    ports:
      - "3012:3012"
    networks:
      - vextrus-network
    depends_on:
      - postgres
      - redis
      - kafka
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: ./infrastructure/docker/services/node-service-optimized.Dockerfile
      args:
        SERVICE_NAME: "@vextrus/api-gateway"
        SERVICE_PATH: services/api-gateway
        SERVICE_PORT: 4000
    container_name: vextrus-api-gateway
    environment:
      NODE_ENV: development
      APP_PORT: 4000
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: vextrus_redis_2024
      MASTER_DATA_URL: http://master-data:3010/graphql
      WORKFLOW_URL: http://workflow:3011/graphql
      RULES_ENGINE_URL: http://rules-engine:3012/graphql
      AUTH_URL: http://auth:3001/graphql
    ports:
      - "4000:4000"
    networks:
      - vextrus-network
    depends_on:
      - auth
      - master-data
      - workflow
      - rules-engine
      - redis
    restart: unless-stopped

  # Adminer - Database Management UI
  adminer:
    image: adminer:4.8.1
    container_name: vextrus-adminer
    ports:
      - "8082:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    networks:
      - vextrus-network
    depends_on:
      - postgres

  # Redis Commander - Redis UI
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: vextrus-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379:0:vextrus_redis_2024
    ports:
      - "8083:8081"
    networks:
      - vextrus-network
    depends_on:
      - redis

networks:
  vextrus-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  zookeeper_logs:
  minio_data: