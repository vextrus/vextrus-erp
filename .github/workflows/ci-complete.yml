name: Complete CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'feature/**']
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  # ========================================
  # TESTING PHASE
  # ========================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: vextrus
          POSTGRES_PASSWORD: vextrus_test
          POSTGRES_DB: vextrus_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Run linting
        run: pnpm run lint

      - name: Run unit tests
        run: pnpm run test
        env:
          NODE_ENV: test
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_USERNAME: vextrus
          DATABASE_PASSWORD: vextrus_test
          DATABASE_NAME: vextrus_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_ACCESS_SECRET: test_access_secret
          JWT_REFRESH_SECRET: test_refresh_secret

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: vextrus
          POSTGRES_PASSWORD: vextrus_test
          POSTGRES_DB: vextrus_test
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

      kafka:
        image: confluentinc/cp-kafka:latest
        env:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
        ports:
          - 9092:9092

      temporal:
        image: temporalio/server:latest
        ports:
          - 7233:7233

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Run integration tests
        run: pnpm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgres://vextrus:vextrus_test@localhost:5432/vextrus_test
          REDIS_URL: redis://localhost:6379
          KAFKA_BROKERS: localhost:9092
          TEMPORAL_ADDRESS: localhost:7233

      - name: Test workflow execution
        run: pnpm run test:workflows
        env:
          TEMPORAL_ADDRESS: localhost:7233

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright
        run: pnpm exec playwright install --with-deps

      - name: Start services with Docker Compose
        run: |
          docker-compose up -d
          sleep 30  # Wait for services to be ready

      - name: Run E2E tests
        run: pnpm run test:e2e

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # ========================================
  # BUILD PHASE
  # ========================================
  build-services:
    name: Build Services
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]

    strategy:
      matrix:
        service:
          - auth
          - master-data
          - workflow
          - rules-engine
          - api-gateway
          - analytics
          - notification

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build ${{ matrix.service }} service
        run: pnpm --filter @vextrus/${{ matrix.service }} build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-dist
          path: services/${{ matrix.service }}/dist
          retention-days: 1

  # ========================================
  # DOCKER BUILD PHASE
  # ========================================
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build-services
    if: github.event_name == 'push'

    strategy:
      matrix:
        service:
          - auth
          - master-data
          - workflow
          - rules-engine
          - api-gateway
          - analytics
          - notification

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ========================================
  # PERFORMANCE TESTING PHASE
  # ========================================
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Setup k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Start test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 60  # Wait for all services to be ready

      - name: Run performance tests
        run: |
          k6 run test-performance/api-load-test.js
          k6 run test-performance/workflow-stress-test.js

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-results/
          retention-days: 30

  # ========================================
  # SECURITY SCANNING PHASE
  # ========================================
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build-services

    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy security scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'vextrus-erp'
          path: '.'
          format: 'HTML'

      - name: Upload OWASP results
        uses: actions/upload-artifact@v4
        with:
          name: owasp-report
          path: reports/

  # ========================================
  # DEPLOYMENT PHASE - STAGING
  # ========================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan, e2e-tests]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.vextrus.com

    steps:
      - uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.13.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy with Helm
        run: |
          helm upgrade --install vextrus-erp ./infrastructure/kubernetes/helm \
            --namespace staging \
            --create-namespace \
            --set image.tag=${{ github.sha }} \
            --set environment=staging \
            --values ./infrastructure/kubernetes/helm/values.staging.yaml \
            --wait \
            --timeout 10m

      - name: Run smoke tests
        run: |
          npm run test:smoke -- --url https://staging.vextrus.com

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Staging deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ========================================
  # DEPLOYMENT PHASE - PRODUCTION
  # ========================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging, performance-tests]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://vextrus.com

    steps:
      - uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.13.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Backup current deployment
        run: |
          kubectl get all -n production -o yaml > backup-$(date +%Y%m%d-%H%M%S).yaml

      - name: Deploy with Helm (Blue-Green)
        run: |
          # Deploy to green environment
          helm upgrade --install vextrus-erp-green ./infrastructure/kubernetes/helm \
            --namespace production \
            --create-namespace \
            --set image.tag=${{ github.sha }} \
            --set environment=production \
            --set deployment.strategy=green \
            --values ./infrastructure/kubernetes/helm/values.production.yaml \
            --wait \
            --timeout 15m

          # Run health checks
          kubectl wait --for=condition=ready pod -l app=vextrus-erp,deployment=green -n production --timeout=600s

          # Switch traffic to green
          kubectl patch service vextrus-erp -n production -p '{"spec":{"selector":{"deployment":"green"}}}'

          # Wait and verify
          sleep 60
          curl -f https://vextrus.com/health || exit 1

          # Remove blue deployment
          helm uninstall vextrus-erp-blue -n production || true

      - name: Run production smoke tests
        run: |
          npm run test:smoke -- --url https://vextrus.com

      - name: Monitor deployment
        run: |
          # Check metrics for 5 minutes
          for i in {1..5}; do
            kubectl top pods -n production
            sleep 60
          done

      - name: Rollback on failure
        if: failure()
        run: |
          kubectl patch service vextrus-erp -n production -p '{"spec":{"selector":{"deployment":"blue"}}}'
          helm uninstall vextrus-erp-green -n production

      - name: Create release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Production deployment successful
            Commit: ${{ github.sha }}
          draft: false
          prerelease: false

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow