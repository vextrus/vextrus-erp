name: Test

on:
  push:
    branches: [main, develop, 'feature/**']
  pull_request:
    branches: [main, develop]

jobs:
  # Job 1: Unit and Integration Tests
  test-unit:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run type check
        run: |
          cd apps/web
          pnpm type-check

      - name: Run unit tests
        run: |
          cd apps/web
          pnpm test:run

      - name: Run browser mode tests
        run: |
          cd apps/web
          pnpm test:browser:run

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-unit
          path: apps/web/test-results/
          retention-days: 7

  # Job 2: E2E Tests
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: |
          cd apps/web
          npx playwright install --with-deps chromium

      - name: Build application
        run: |
          cd apps/web
          pnpm build

      - name: Run E2E tests
        run: |
          cd apps/web
          pnpm test:e2e
        env:
          CI: true

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: apps/web/playwright-report/
          retention-days: 7

      - name: Upload test videos
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-videos
          path: apps/web/test-results/
          retention-days: 7

  # Job 3: Code Coverage
  test-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests with coverage
        run: |
          cd apps/web
          pnpm test:coverage

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: apps/web/coverage/
          retention-days: 30

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: davelosert/vitest-coverage-report-action@v2
        with:
          working-directory: apps/web

  # Job 4: Lint and Format Check
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: |
          cd apps/web
          pnpm lint

  # Job 5: Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-unit, test-e2e, test-coverage, lint]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "Unit Tests: ${{ needs.test-unit.result }}"
          echo "E2E Tests: ${{ needs.test-e2e.result }}"
          echo "Coverage: ${{ needs.test-coverage.result }}"
          echo "Lint: ${{ needs.lint.result }}"

          if [[ "${{ needs.test-unit.result }}" != "success" ]] || \
             [[ "${{ needs.test-e2e.result }}" != "success" ]] || \
             [[ "${{ needs.test-coverage.result }}" != "success" ]] || \
             [[ "${{ needs.lint.result }}" != "success" ]]; then
            echo "❌ Some tests failed"
            exit 1
          fi

          echo "✅ All tests passed"
