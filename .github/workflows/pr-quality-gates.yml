name: PR Quality Gates

# Purpose: Automated quality checks + agent review recommendations
# Triggers: On PR creation/update
# Benefits: Consistent quality, early feedback, prevent bad merges

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - develop

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  quality-analysis:
    name: Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR Branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Analyze PR Complexity
        id: complexity
        run: |
          # Count changed files
          FILES_CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | wc -l)

          # Count lines changed
          LINES_ADDED=$(git diff --numstat origin/${{ github.base_ref }}...HEAD | awk '{sum+=$1} END {print sum}')
          LINES_DELETED=$(git diff --numstat origin/${{ github.base_ref }}...HEAD | awk '{sum+=$2} END {print sum}')
          LINES_CHANGED=$((LINES_ADDED + LINES_DELETED))

          # Determine complexity
          if [ $FILES_CHANGED -gt 20 ] || [ $LINES_CHANGED -gt 500 ]; then
            COMPLEXITY="high"
            RECOMMEND_AGENT_REVIEW="true"
          elif [ $FILES_CHANGED -gt 10 ] || [ $LINES_CHANGED -gt 200 ]; then
            COMPLEXITY="medium"
            RECOMMEND_AGENT_REVIEW="true"
          else
            COMPLEXITY="low"
            RECOMMEND_AGENT_REVIEW="false"
          fi

          echo "files_changed=$FILES_CHANGED" >> $GITHUB_OUTPUT
          echo "lines_added=$LINES_ADDED" >> $GITHUB_OUTPUT
          echo "lines_deleted=$LINES_DELETED" >> $GITHUB_OUTPUT
          echo "lines_changed=$LINES_CHANGED" >> $GITHUB_OUTPUT
          echo "complexity=$COMPLEXITY" >> $GITHUB_OUTPUT
          echo "recommend_agent_review=$RECOMMEND_AGENT_REVIEW" >> $GITHUB_OUTPUT

      - name: TypeScript Type Check
        id: typecheck
        continue-on-error: true
        run: |
          pnpm build 2>&1 | tee typecheck.log
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "status=‚úÖ PASS" >> $GITHUB_OUTPUT
            echo "errors=0" >> $GITHUB_OUTPUT
          else
            ERRORS=$(grep -c "error TS" typecheck.log || echo "0")
            echo "status=‚ùå FAIL" >> $GITHUB_OUTPUT
            echo "errors=$ERRORS" >> $GITHUB_OUTPUT
          fi

      - name: Run Tests
        id: tests
        continue-on-error: true
        run: |
          npm test 2>&1 | tee test.log
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            PASSING=$(grep -oP "\d+(?= passing)" test.log | head -1 || echo "0")
            echo "status=‚úÖ PASS" >> $GITHUB_OUTPUT
            echo "passing=$PASSING" >> $GITHUB_OUTPUT
            echo "failing=0" >> $GITHUB_OUTPUT
          else
            PASSING=$(grep -oP "\d+(?= passing)" test.log | head -1 || echo "0")
            FAILING=$(grep -oP "\d+(?= failing)" test.log | head -1 || echo "1")
            echo "status=‚ùå FAIL" >> $GITHUB_OUTPUT
            echo "passing=$PASSING" >> $GITHUB_OUTPUT
            echo "failing=$FAILING" >> $GITHUB_OUTPUT
          fi

      - name: Check Test Coverage
        id: coverage
        continue-on-error: true
        run: |
          # Extract coverage from test output
          COVERAGE=$(grep -oP "All files\s+\|\s+\K\d+\.\d+(?=%)" test.log || echo "0")
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT

          if (( $(echo "$COVERAGE >= 90" | bc -l) )); then
            echo "status=‚úÖ EXCELLENT (‚â•90%)" >> $GITHUB_OUTPUT
          elif (( $(echo "$COVERAGE >= 80" | bc -l) )); then
            echo "status=‚úì GOOD (‚â•80%)" >> $GITHUB_OUTPUT
          elif (( $(echo "$COVERAGE >= 70" | bc -l) )); then
            echo "status=‚ö†Ô∏è ACCEPTABLE (‚â•70%)" >> $GITHUB_OUTPUT
          else
            echo "status=‚ùå LOW (<70%)" >> $GITHUB_OUTPUT
          fi

      - name: Calculate Quality Score
        id: score
        run: |
          # Quality score calculation (0-10)
          SCORE=10.0

          # TypeScript errors (-0.5 per error, max -3)
          TS_ERRORS=${{ steps.typecheck.outputs.errors }}
          TS_PENALTY=$(echo "scale=1; if ($TS_ERRORS * 0.5 > 3) 3 else $TS_ERRORS * 0.5" | bc)
          SCORE=$(echo "scale=1; $SCORE - $TS_PENALTY" | bc)

          # Test failures (-1 per failure, max -4)
          TEST_FAILURES=${{ steps.tests.outputs.failing }}
          TEST_PENALTY=$(echo "scale=1; if ($TEST_FAILURES > 4) 4 else $TEST_FAILURES" | bc)
          SCORE=$(echo "scale=1; $SCORE - $TEST_PENALTY" | bc)

          # Coverage penalty (-0.5 if <90%, -1 if <80%, -2 if <70%)
          COVERAGE=${{ steps.coverage.outputs.coverage }}
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            SCORE=$(echo "scale=1; $SCORE - 2" | bc)
          elif (( $(echo "$COVERAGE < 80" | bc -l) )); then
            SCORE=$(echo "scale=1; $SCORE - 1" | bc)
          elif (( $(echo "$COVERAGE < 90" | bc -l) )); then
            SCORE=$(echo "scale=1; $SCORE - 0.5" | bc)
          fi

          echo "score=$SCORE" >> $GITHUB_OUTPUT

          # Determine recommendation
          if (( $(echo "$SCORE >= 9.5" | bc -l) )); then
            echo "recommendation=‚úÖ EXCELLENT - Ready to merge" >> $GITHUB_OUTPUT
            echo "block_merge=false" >> $GITHUB_OUTPUT
          elif (( $(echo "$SCORE >= 8.5" | bc -l) )); then
            echo "recommendation=‚úì GOOD - Minor improvements suggested" >> $GITHUB_OUTPUT
            echo "block_merge=false" >> $GITHUB_OUTPUT
          elif (( $(echo "$SCORE >= 7.0" | bc -l) )); then
            echo "recommendation=‚ö†Ô∏è ACCEPTABLE - Consider improvements before merge" >> $GITHUB_OUTPUT
            echo "block_merge=false" >> $GITHUB_OUTPUT
          else
            echo "recommendation=‚ùå NEEDS WORK - Quality gates not met" >> $GITHUB_OUTPUT
            echo "block_merge=true" >> $GITHUB_OUTPUT
          fi

      - name: Post Quality Report
        uses: actions/github-script@v7
        with:
          script: |
            const complexity = '${{ steps.complexity.outputs.complexity }}';
            const recommendAgentReview = '${{ steps.complexity.outputs.recommend_agent_review }}' === 'true';
            const qualityScore = '${{ steps.score.outputs.score }}';
            const recommendation = '${{ steps.score.outputs.recommendation }}';

            let agentReviewSection = '';
            if (recommendAgentReview) {
              agentReviewSection = `
            ### ü§ñ Agent Review Recommended

            This PR has **${complexity} complexity** (${context.payload.pull_request.changed_files} files, ${context.payload.pull_request.additions + context.payload.pull_request.deletions} lines changed).

            **Recommended Agent**: \`kieran-typescript-reviewer\`

            \`\`\`bash
            # Run agent review locally
            # 1. Checkout PR branch
            git checkout pr-${{ github.event.pull_request.number }}

            # 2. Invoke agent review (in Claude Code)
            # Agent: kieran-typescript-reviewer
            # Scope: Review all changed files for quality, patterns, best practices
            \`\`\`

            **Quality Criteria** (9.5/10 target):
            - TypeScript best practices
            - Pattern consistency (DDD, CQRS, Event Sourcing)
            - Bangladesh compliance (VAT, TDS, fiscal year)
            - GraphQL Federation v2 patterns
            - Security (100% auth coverage, no @Public())
              `;
            }

            const comment = `## Quality Report

            **Quality Score**: ${qualityScore}/10
            **Recommendation**: ${recommendation}

            ---

            ### Quality Gates

            | Gate | Status | Details |
            |------|--------|---------|
            | TypeScript | ${{ steps.typecheck.outputs.status }} | ${{ steps.typecheck.outputs.errors }} errors |
            | Tests | ${{ steps.tests.outputs.status }} | ${{ steps.tests.outputs.passing }} passing, ${{ steps.tests.outputs.failing }} failing |
            | Coverage | ${{ steps.coverage.outputs.status }} | ${{ steps.coverage.outputs.coverage }}% |

            ---

            ### PR Complexity

            - **Files Changed**: ${{ steps.complexity.outputs.files_changed }}
            - **Lines Added**: +${{ steps.complexity.outputs.lines_added }}
            - **Lines Deleted**: -${{ steps.complexity.outputs.lines_deleted }}
            - **Complexity**: ${complexity.toUpperCase()}

            ${agentReviewSection}

            ---

            <sub>ü§ñ Automated by [pr-quality-gates.yml](https://github.com/${{ github.repository }}/blob/${{ github.head_ref }}/.github/workflows/pr-quality-gates.yml)</sub>
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Block Merge if Quality Too Low
        if: steps.score.outputs.block_merge == 'true'
        run: |
          echo "‚ùå Quality score too low (${{ steps.score.outputs.score }}/10)"
          echo "Minimum required: 7.0/10"
          echo "Please fix quality issues before merging."
          exit 1

      - name: Summary
        if: always()
        run: |
          echo "### Quality Gates Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality Score**: ${{ steps.score.outputs.score }}/10" >> $GITHUB_STEP_SUMMARY
          echo "- **Recommendation**: ${{ steps.score.outputs.recommendation }}" >> $GITHUB_STEP_SUMMARY
          echo "- **TypeScript**: ${{ steps.typecheck.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests**: ${{ steps.tests.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage**: ${{ steps.coverage.outputs.coverage }}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.complexity.outputs.recommend_agent_review }}" == "true" ]; then
            echo "‚ö†Ô∏è Agent review recommended (kieran-typescript-reviewer)" >> $GITHUB_STEP_SUMMARY
          fi
