services:
  traefik:
    image: traefik:v3.5
    container_name: vextrus-traefik
    command:
    - --api.dashboard=true
    - --api.debug=true
    - --api.insecure=true
    - --providers.docker=true
    - --providers.docker.exposedbydefault=false
    - --providers.docker.network=vextrus-network
    - --providers.file.directory=/etc/traefik/dynamic
    - --providers.file.watch=true
    - --entrypoints.web.address=:80
    - --entrypoints.websecure.address=:443
    - --log.level=DEBUG
    - --accesslog=true
    ports:
    - 80:80
    - 443:443
    - 8081:8080
    volumes:
    - //var/run/docker.sock:/var/run/docker.sock:ro
    - ./infrastructure/traefik:/etc/traefik/dynamic:ro
    networks:
    - vextrus-network
    labels:
    - traefik.enable=true
    - traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)
    - traefik.http.routers.dashboard.service=api@internal
    - traefik.http.routers.dashboard.entrypoints=web
    - traefik.http.middlewares.tenant-headers.headers.customrequestheaders.X-Tenant-ID=default
    restart: unless-stopped
    depends_on:
    - postgres
    - redis
  auth:
    build:
      context: .
      dockerfile: ./infrastructure/docker/templates/node-service-production.Dockerfile
      args:
        SERVICE_NAME: auth
        SERVICE_PORT: 3001
        NODE_VERSION: 20
    image: vextrus-erp/auth:${VERSION:-latest}
    container_name: vextrus-auth
    environment:
      NODE_ENV: development
      APP_PORT: 3001
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: vextrus
      DATABASE_PASSWORD: vextrus_dev_2024
      DATABASE_NAME: vextrus_auth
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: vextrus_redis_2024
      JWT_ACCESS_SECRET: vextrus_jwt_access_secret_dev_2024
      JWT_ACCESS_EXPIRES_IN: 15m
      JWT_REFRESH_SECRET: vextrus_jwt_refresh_secret_dev_2024
      JWT_REFRESH_EXPIRES_IN: 7d
      KAFKA_BROKERS: kafka:9093
      KAFKA_CLIENT_ID: auth-service
      KAFKA_CONSUMER_GROUP: auth-consumer
      OTEL_EXPORTER_OTLP_ENDPOINT: http://signoz-otel-collector:4318
      OTEL_SERVICE_NAME: auth-service
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_LOGS_EXPORTER: otlp
    ports:
    - 3001:3001
    networks:
    - vextrus-network
    labels:
    - traefik.enable=true
    - traefik.http.routers.auth.rule=Host(`api.localhost`) && PathPrefix(`/api/auth`)
    - traefik.http.routers.auth.entrypoints=web
    - traefik.http.routers.auth.service=auth-service
    - traefik.http.services.auth-service.loadbalancer.server.port=3001
    - traefik.http.routers.auth.middlewares=tenant-headers@docker
    depends_on:
    - postgres
    - redis
    - traefik
    restart: unless-stopped
  postgres:
    image: postgres:16-alpine
    container_name: vextrus-postgres
    environment:
      POSTGRES_USER: vextrus
      POSTGRES_PASSWORD: vextrus_dev_2024
      POSTGRES_INITDB_ARGS: --encoding=UTF8 --locale=en_US.utf8
    ports:
    - 5432:5432
    volumes:
    - postgres_data:/var/lib/postgresql/data
    - ./infrastructure/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
    - vextrus-network
    healthcheck:
      test:
      - CMD-SHELL
      - pg_isready -U vextrus -d vextrus_erp
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:7-alpine
    container_name: vextrus-redis
    command: redis-server --appendonly yes --requirepass vextrus_redis_2024
    ports:
    - 6379:6379
    volumes:
    - redis_data:/data
    networks:
    - vextrus-network
    healthcheck:
      test:
      - CMD
      - redis-cli
      - --raw
      - incr
      - ping
      interval: 10s
      timeout: 5s
      retries: 5
  eventstore:
    image: eventstore/eventstore:23.10.0-bookworm-slim
    container_name: vextrus-eventstore
    environment:
      - EVENTSTORE_CLUSTER_SIZE=1
      - EVENTSTORE_RUN_PROJECTIONS=All
      - EVENTSTORE_START_STANDARD_PROJECTIONS=true
      - EVENTSTORE_HTTP_PORT=2113
      - EVENTSTORE_INSECURE=true
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
      - EVENTSTORE_MEM_DB=false
      - EVENTSTORE_DISABLE_LOG_FILE=false
    ports:
      - "22113:2113"
      - "21113:1113"
    volumes:
      - eventstore_data:/var/lib/eventstore
      - eventstore_logs:/var/log/eventstore
    networks:
      - vextrus-network
    healthcheck:
      test:
        - CMD
        - curl
        - -f
        - http://localhost:2113/health/live
      interval: 15s
      timeout: 5s
      retries: 5
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: vextrus-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
    - zookeeper_data:/var/lib/zookeeper/data
    - zookeeper_logs:/var/lib/zookeeper/log
    networks:
    - vextrus-network
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: vextrus-kafka
    depends_on:
    - zookeeper
    ports:
    - 9092:9092
    - 9093:9093
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
    - kafka_data:/var/lib/kafka/data
    networks:
    - vextrus-network
    healthcheck:
      test:
      - CMD
      - kafka-broker-api-versions
      - --bootstrap-server
      - kafka:9093
      interval: 10s
      timeout: 10s
      retries: 5
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: vextrus-kafka-ui
    depends_on:
    - kafka
    ports:
    - 8085:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: vextrus-local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
    - vextrus-network
  minio:
    image: minio/minio:latest
    container_name: vextrus-minio
    ports:
    - 9000:9000
    - 9001:9001
    environment:
      MINIO_ROOT_USER: vextrus_admin
      MINIO_ROOT_PASSWORD: vextrus_minio_2024
    volumes:
    - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
    - vextrus-network
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:9000/minio/health/live
      interval: 30s
      timeout: 20s
      retries: 3
  elasticsearch:
    image: elasticsearch:8.11.1
    container_name: vextrus-elasticsearch
    environment:
    - discovery.type=single-node
    - xpack.security.enabled=false
    - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
    - 9200:9200
    volumes:
    - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
    - vextrus-network
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:9200
      interval: 30s
      timeout: 10s
      retries: 5
  rabbitmq:
    image: rabbitmq:3-management
    container_name: vextrus-rabbitmq
    ports:
    - 5672:5672
    - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: vextrus
      RABBITMQ_DEFAULT_PASS: vextrus_rabbitmq_2024
    volumes:
    - rabbitmq_data:/var/lib/rabbitmq
    networks:
    - vextrus-network
    healthcheck:
      test:
      - CMD
      - rabbitmq-diagnostics
      - ping
      interval: 30s
      timeout: 10s
      retries: 5
  notification:
    build:
      context: .
      dockerfile: ./infrastructure/docker/templates/node-service-production.Dockerfile
      args:
        SERVICE_NAME: notification
        SERVICE_PORT: 3003
        NODE_VERSION: 20
    image: vextrus-erp/notification:${VERSION:-latest}
    container_name: vextrus-notification
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: development
      APP_PORT: 3003
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: vextrus
      DATABASE_PASSWORD: vextrus_dev_2024
      DATABASE_NAME: vextrus_notification
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: vextrus_redis_2024
      KAFKA_BROKERS: kafka:9093
      SMTP_HOST: mailhog
      SMTP_PORT: 1025
      SMTP_USER: ''
      SMTP_PASS: ''
      ALPHA_SMS_API_KEY: ${ALPHA_SMS_API_KEY:-}
      SMS_NET_BD_API_KEY: ${SMS_NET_BD_API_KEY:-}
    networks:
    - vextrus-network
    labels:
    - traefik.enable=true
    - traefik.http.routers.notification.rule=Host(`api.localhost`) && PathPrefix(`/api/notifications`)
    - traefik.http.routers.notification.entrypoints=web
    - traefik.http.services.notification-service.loadbalancer.server.port=3003
    depends_on:
    - postgres
    - redis
    - kafka
    - mailhog
    restart: unless-stopped
  configuration:
    build:
      context: .
      dockerfile: ./infrastructure/docker/templates/node-service-production.Dockerfile
      args:
        SERVICE_NAME: configuration
        SERVICE_PORT: 3004
        NODE_VERSION: 20
    image: vextrus-erp/configuration:${VERSION:-latest}
    container_name: vextrus-configuration
    ports:
      - "3004:3004"
    environment:
      NODE_ENV: development
      APP_PORT: 3004
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: vextrus
      DATABASE_PASSWORD: vextrus_dev_2024
      DATABASE_NAME: vextrus_configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: vextrus_redis_2024
      KAFKA_BROKERS: kafka:9093
      KAFKA_GROUP_ID: configuration-consumer
    networks:
    - vextrus-network
    labels:
    - traefik.enable=true
    - traefik.http.routers.configuration.rule=Host(`api.localhost`) && PathPrefix(`/api/configuration`)
    - traefik.http.routers.configuration.entrypoints=web
    - traefik.http.services.configuration-service.loadbalancer.server.port=3004
    depends_on:
    - postgres
    - redis
    restart: unless-stopped
  scheduler:
    build:
      context: .
      dockerfile: ./infrastructure/docker/templates/node-service-production.Dockerfile
      args:
        SERVICE_NAME: scheduler
        SERVICE_PORT: 3005
        NODE_VERSION: 20
    image: vextrus-erp/scheduler:${VERSION:-latest}
    container_name: vextrus-scheduler
    ports:
      - "3005:3005"
    environment:
      NODE_ENV: development
      APP_PORT: 3005
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: vextrus
      DATABASE_PASSWORD: vextrus_dev_2024
      DATABASE_NAME: vextrus_scheduler
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: vextrus_redis_2024
      KAFKA_BROKERS: kafka:9093
    networks:
    - vextrus-network
    labels:
    - traefik.enable=true
    - traefik.http.routers.scheduler.rule=Host(`api.localhost`) && PathPrefix(`/api/scheduler`)
    - traefik.http.routers.scheduler.entrypoints=web
    - traefik.http.services.scheduler-service.loadbalancer.server.port=3005
    depends_on:
    - postgres
    - redis
    - kafka
    restart: unless-stopped
  document-generator:
    build:
      context: .
      dockerfile: ./infrastructure/docker/templates/node-service-production.Dockerfile
      args:
        SERVICE_NAME: document-generator
        SERVICE_PORT: 3006
        NODE_VERSION: 20
    image: vextrus-erp/document-generator:${VERSION:-latest}
    container_name: vextrus-document-generator
    ports:
      - "3006:3006"
    environment:
      NODE_ENV: production
      APP_PORT: 3006
      PORT: 3006
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: vextrus
      DATABASE_PASSWORD: vextrus_dev_2024
      DATABASE_NAME: vextrus_document_generator
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: vextrus_redis_2024
      KAFKA_BROKERS: kafka:9093
    networks:
    - vextrus-network
    labels:
    - traefik.enable=true
    - traefik.http.routers.docgen.rule=Host(`api.localhost`) && PathPrefix(`/api/documents`)
    - traefik.http.routers.docgen.entrypoints=web
    - traefik.http.services.docgen-service.loadbalancer.server.port=3006
    depends_on:
    - postgres
    - redis
    - kafka
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://127.0.0.1:3006/api/v1/health || exit 1"]
      interval: 30s
      timeout: 5s
      start_period: 45s
      retries: 3
    restart: unless-stopped
  import-export:
    build:
      context: .
      dockerfile: ./infrastructure/docker/templates/node-service-production.Dockerfile
      args:
        SERVICE_NAME: import-export
        SERVICE_PORT: 3007
        NODE_VERSION: 20
    image: vextrus-erp/import-export:${VERSION:-latest}
    container_name: vextrus-import-export
    ports:
      - "3007:3007"
    environment:
      NODE_ENV: development
      APP_PORT: 3007
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: vextrus
      DATABASE_PASSWORD: vextrus_dev_2024
      DATABASE_NAME: vextrus_import_export
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: vextrus_redis_2024
      KAFKA_BROKERS: kafka:9093
    networks:
    - vextrus-network
    labels:
    - traefik.enable=true
    - traefik.http.routers.impexp.rule=Host(`api.localhost`) && PathPrefix(`/api/import-export`)
    - traefik.http.routers.impexp.entrypoints=web
    - traefik.http.services.impexp-service.loadbalancer.server.port=3007
    depends_on:
    - postgres
    - redis
    - kafka
    restart: unless-stopped
  file-storage:
    build:
      context: .
      dockerfile: ./infrastructure/docker/templates/node-service-production.Dockerfile
      args:
        SERVICE_NAME: file-storage
        SERVICE_PORT: 3008
        NODE_VERSION: 20
    image: vextrus-erp/file-storage:${VERSION:-latest}
    container_name: vextrus-file-storage
    ports:
      - "3008:3008"
    environment:
      NODE_ENV: development
      APP_PORT: 3008
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: vextrus
      DATABASE_PASSWORD: vextrus_dev_2024
      DATABASE_NAME: vextrus_file_storage
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: vextrus_redis_2024
      KAFKA_BROKERS: kafka:9093
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: vextrus_admin
      MINIO_SECRET_KEY: vextrus_minio_2024
      MINIO_USE_SSL: 'false'
    networks:
    - vextrus-network
    labels:
    - traefik.enable=true
    - traefik.http.routers.filestorage.rule=Host(`api.localhost`) && PathPrefix(`/api/files`)
    - traefik.http.routers.filestorage.entrypoints=web
    - traefik.http.services.filestorage-service.loadbalancer.server.port=3008
    depends_on:
    - postgres
    - redis
    - kafka
    - minio
    restart: unless-stopped
  audit:
    build:
      context: .
      dockerfile: ./infrastructure/docker/templates/node-service-production.Dockerfile
      args:
        SERVICE_NAME: audit
        SERVICE_PORT: 3009
        NODE_VERSION: 20
    image: vextrus-erp/audit:${VERSION:-latest}
    container_name: vextrus-audit
    ports:
      - "3009:3009"
    environment:
      NODE_ENV: development
      APP_PORT: 3009
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: vextrus
      DATABASE_PASSWORD: vextrus_dev_2024
      DATABASE_NAME: vextrus_audit
      KAFKA_BROKERS: kafka:9093
      ELASTICSEARCH_NODE: http://elasticsearch:9200
    networks:
    - vextrus-network
    labels:
    - traefik.enable=true
    - traefik.http.routers.audit.rule=Host(`api.localhost`) && PathPrefix(`/api/audit`)
    - traefik.http.routers.audit.entrypoints=web
    - traefik.http.services.audit-service.loadbalancer.server.port=3009
    depends_on:
    - postgres
    - kafka
    - elasticsearch
    restart: unless-stopped
  master-data:
    build:
      context: .
      dockerfile: ./infrastructure/docker/templates/node-service-production.Dockerfile
      args:
        SERVICE_NAME: master-data
        SERVICE_PORT: 3002
        NODE_VERSION: 20
    image: vextrus-erp/master-data:${VERSION:-latest}
    container_name: vextrus-master-data
    environment:
      NODE_ENV: development
      APP_PORT: 3002
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: vextrus
      DATABASE_PASSWORD: vextrus_dev_2024
      DATABASE_NAME: vextrus_master_data
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: vextrus_redis_2024
      KAFKA_BROKERS: kafka:9093
      OTEL_EXPORTER_OTLP_ENDPOINT: http://signoz-otel-collector:4318
      OTEL_SERVICE_NAME: master-data-service
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_LOGS_EXPORTER: otlp
    ports:
    - 3002:3002
    networks:
    - vextrus-network
    labels:
    - traefik.enable=true
    - traefik.http.routers.masterdata.rule=Host(`api.localhost`) && PathPrefix(`/api/master-data`)
    - traefik.http.routers.masterdata.entrypoints=web
    - traefik.http.services.masterdata-service.loadbalancer.server.port=3002
    depends_on:
    - postgres
    - redis
    - kafka
    - signoz-otel-collector
    restart: unless-stopped
  workflow:
    build:
      context: .
      dockerfile: ./infrastructure/docker/templates/node-service-debian-ml.Dockerfile
      args:
        SERVICE_NAME: workflow
        SERVICE_PORT: 3011
        NODE_VERSION: 20
    image: vextrus-erp/workflow:${VERSION:-latest}
    container_name: vextrus-workflow
    command: node dist/main.js
    environment:
      NODE_ENV: development
      PORT: 3011
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: vextrus
      DATABASE_PASSWORD: vextrus_dev_2024
      DATABASE_NAME: vextrus_workflow
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: vextrus_redis_2024
      KAFKA_BROKERS: kafka:9093
      TEMPORAL_ADDRESS: temporal:7233
      TEMPORAL_NAMESPACE: vextrus
      OTEL_EXPORTER_OTLP_ENDPOINT: http://signoz-otel-collector:4318
      OTEL_SERVICE_NAME: workflow-service
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_LOGS_EXPORTER: otlp
    ports:
    - 3011:3011
    networks:
    - vextrus-network
    labels:
    - traefik.enable=true
    - traefik.http.routers.workflow.rule=Host(`api.localhost`) && PathPrefix(`/api/workflow`)
    - traefik.http.routers.workflow.entrypoints=web
    - traefik.http.services.workflow-service.loadbalancer.server.port=3011
    depends_on:
    - postgres
    - redis
    - kafka
    - temporal
    - signoz-otel-collector
    restart: unless-stopped
  rules-engine:
    build:
      context: .
      dockerfile: ./infrastructure/docker/templates/node-service-production.Dockerfile
      args:
        SERVICE_NAME: rules-engine
        SERVICE_PORT: 3012
        NODE_VERSION: 20
    image: vextrus-erp/rules-engine:${VERSION:-latest}
    container_name: vextrus-rules-engine
    environment:
      NODE_ENV: development
      APP_PORT: 3012
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: vextrus
      DATABASE_PASSWORD: vextrus_dev_2024
      DATABASE_NAME: vextrus_rules_engine
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: vextrus_redis_2024
      KAFKA_BROKERS: kafka:9093
      OTEL_EXPORTER_OTLP_ENDPOINT: http://signoz-otel-collector:4318
      OTEL_SERVICE_NAME: rules-engine-service
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_LOGS_EXPORTER: otlp
    ports:
    - 3012:3012
    networks:
    - vextrus-network
    labels:
    - traefik.enable=true
    - traefik.http.routers.rulesengine.rule=Host(`api.localhost`) && PathPrefix(`/api/rules`)
    - traefik.http.routers.rulesengine.entrypoints=web
    - traefik.http.services.rulesengine-service.loadbalancer.server.port=3012
    depends_on:
    - postgres
    - redis
    - kafka
    - signoz-otel-collector
    restart: unless-stopped
  api-gateway:
    build:
      context: .
      dockerfile: ./infrastructure/docker/templates/node-service-production.Dockerfile
      args:
        SERVICE_NAME: api-gateway
        SERVICE_PORT: 4000
        NODE_VERSION: 20
    image: vextrus-erp/api-gateway:${VERSION:-latest}
    container_name: vextrus-api-gateway
    environment:
      NODE_ENV: development
      APP_PORT: 4000
      JWT_ACCESS_SECRET: vextrus_jwt_access_secret_dev_2024
      JWT_ACCESS_EXPIRES_IN: 15m
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: vextrus_redis_2024
      AUTH_SERVICE_URL: http://auth:3001/graphql
      MASTER_DATA_SERVICE_URL: http://master-data:3002/graphql
      WORKFLOW_SERVICE_URL: http://workflow:3011/graphql
      RULES_ENGINE_SERVICE_URL: http://rules-engine:3012/graphql
      ORGANIZATION_SERVICE_URL: http://organization:3016/graphql
      FINANCE_SERVICE_URL: http://finance:3014/graphql
      SKIP_SERVICES: hr,crm,scm,project-management
      KAFKA_BROKERS: kafka:9093
      OTEL_EXPORTER_OTLP_ENDPOINT: http://signoz-otel-collector:4318
      OTEL_SERVICE_NAME: api-gateway
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_LOGS_EXPORTER: otlp
    ports:
    - 4000:4000
    networks:
    - vextrus-network
    labels:
    - traefik.enable=true
    - traefik.http.routers.gateway.rule=Host(`api.localhost`) && PathPrefix(`/graphql`)
    - traefik.http.routers.gateway.entrypoints=web
    - traefik.http.services.gateway-service.loadbalancer.server.port=4000
    depends_on:
    - master-data
    - workflow
    - rules-engine
    - auth
    - signoz-otel-collector
    restart: unless-stopped
  temporal:
    image: temporalio/auto-setup:1.22.0
    container_name: vextrus-temporal
    depends_on:
    - postgres
    environment:
    - DB=postgresql
    - DB_PORT=5432
    - POSTGRES_USER=vextrus
    - POSTGRES_PWD=vextrus_dev_2024
    - POSTGRES_SEEDS=postgres
    - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
    ports:
    - 7233:7233
    networks:
    - vextrus-network
    volumes:
    - ./infrastructure/temporal/dynamicconfig:/etc/temporal/config/dynamicconfig
  temporal-ui:
    image: temporalio/ui:2.21.0
    container_name: vextrus-temporal-ui
    depends_on:
    - temporal
    environment:
    - TEMPORAL_ADDRESS=temporal:7233
    - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    ports:
    - 8088:8080
    networks:
    - vextrus-network
  signoz-clickhouse:
    image: clickhouse/clickhouse-server:23.8-alpine
    container_name: vextrus-signoz-clickhouse
    volumes:
    - signoz_clickhouse_data:/var/lib/clickhouse
    environment:
      CLICKHOUSE_DB: signoz_metrics
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 0
    ports:
    - 9100:9000
    - 8123:8123
    networks:
    - vextrus-network
  signoz-otel-collector:
    image: otel/opentelemetry-collector-contrib:0.88.0
    container_name: vextrus-signoz-otel-collector
    command:
    - --config=/etc/otel-collector-config.yaml
    volumes:
    - ./infrastructure/docker/signoz/otel-collector-simple.yaml:/etc/otel-collector-config.yaml
    ports:
    - 4317:4317
    - 4318:4318
    - 8889:8889
    - 13133:13133
    - 55679:55679
    networks:
    - vextrus-network
  signoz-frontend:
    image: signoz/frontend:0.38.2
    container_name: vextrus-signoz-frontend
    ports:
    - 3301:3301
    environment:
      FRONTEND_API_URL: http://signoz-query-service:8080
    depends_on:
      signoz-query-service:
        condition: service_healthy
    networks:
    - vextrus-network
    restart: unless-stopped
  signoz-query-service:
    image: signoz/query-service:0.38.2
    container_name: vextrus-signoz-query-service
    ports:
    - 8084:8080
    volumes:
    - signoz_query_data:/var/lib/signoz
    environment:
      ClickHouseUrl: tcp://signoz-clickhouse:9000
      STORAGE: clickhouse
      GODEBUG: netdns=go
      TELEMETRY_ENABLED: false
    depends_on:
      signoz-clickhouse:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/api/v1/version"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s
    networks:
    - vextrus-network
    restart: unless-stopped
  adminer:
    image: adminer:4.8.1
    container_name: vextrus-adminer
    ports:
    - 8082:8080
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    networks:
    - vextrus-network
    depends_on:
    - postgres
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: vextrus-redis-commander
    environment:
    - REDIS_HOSTS=local:redis:6379:0:vextrus_redis_2024
    ports:
    - 8083:8081
    networks:
    - vextrus-network
    depends_on:
    - redis
  verdaccio:
    image: verdaccio/verdaccio:5
    container_name: vextrus-verdaccio
    ports:
    - 4873:4873
    volumes:
    - verdaccio_data:/verdaccio/storage
    - ./infrastructure/verdaccio/config.yaml:/verdaccio/conf/config.yaml
    - ./infrastructure/verdaccio/htpasswd:/verdaccio/auth/htpasswd
    environment:
      VERDACCIO_PUBLIC_URL: http://localhost:4873/
    networks:
    - vextrus-network
    healthcheck:
      test:
      - CMD
      - wget
      - --quiet
      - --tries=1
      - --spider
      - http://127.0.0.1:4873/-/ping
      interval: 30s
      timeout: 10s
      start_period: 40s
      retries: 5
  crm:
    build:
      context: .
      dockerfile: ./infrastructure/docker/services/universal-service.Dockerfile
      args:
        SERVICE_NAME: crm
        SERVICE_PORT: 3013
    container_name: vextrus-crm
    environment:
      NODE_ENV: development
      APP_PORT: 3013
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: vextrus
      DATABASE_PASSWORD: vextrus_dev_2024
      DATABASE_NAME: vextrus_crm
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: vextrus_redis_2024
      KAFKA_BROKERS: kafka:9093
      KAFKA_CLIENT_ID: crm-service
      KAFKA_CONSUMER_GROUP: crm-consumer
      OTEL_EXPORTER_OTLP_ENDPOINT: http://signoz-otel-collector:4318
      OTEL_SERVICE_NAME: crm-service
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_LOGS_EXPORTER: otlp
    ports:
    - 3013:3013
    networks:
    - vextrus-network
    labels:
    - traefik.enable=true
    - traefik.http.routers.crm.rule=Host(`api.localhost`) && PathPrefix(`/api/crm`)
    - traefik.http.routers.crm.entrypoints=web
    - traefik.http.routers.crm.service=crm-service
    - traefik.http.services.crm-service.loadbalancer.server.port=3013
    depends_on:
    - postgres
    - redis
    - kafka
    restart: unless-stopped
  finance:
    build:
      context: .
      dockerfile: ./infrastructure/docker/templates/node-service-debian-ml.Dockerfile
      args:
        SERVICE_NAME: finance
        SERVICE_PORT: 3014
        NODE_VERSION: 20
    image: vextrus-erp/finance:${VERSION:-latest}
    container_name: vextrus-finance
    environment:
      NODE_ENV: development
      PORT: 3014
      APP_PORT: 3014
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: vextrus
      DATABASE_PASSWORD: vextrus_dev_2024
      DATABASE_NAME: vextrus_finance
      EVENTSTORE_CONNECTION_STRING: esdb://eventstore:2113?tls=false
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: vextrus_redis_2024
      KAFKA_BROKERS: kafka:9093
      KAFKA_CLIENT_ID: finance-service
      KAFKA_CONSUMER_GROUP: finance-consumer
      JWT_SECRET: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9
      JWT_EXPIRES_IN: 24h
      AUTH_SERVICE_URL: http://auth:3001
      VAT_RATE: 15
      TAX_WITHHOLDING_RATE: 10
      FISCAL_YEAR_START: 7
      DEFAULT_TENANT_ID: default
      OTEL_EXPORTER_OTLP_ENDPOINT: http://signoz-otel-collector:4318
      OTEL_SERVICE_NAME: finance-service
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_LOGS_EXPORTER: otlp
    ports:
    - 3014:3014
    # Volume mounts removed for production mode - finance now runs from Docker build like other services
    # This fixes Apollo Sandbox module resolution issues
    # For development with hot-reload, use docker-compose.dev.yml override
    networks:
    - vextrus-network
    labels:
    - traefik.enable=true
    - traefik.http.routers.finance.rule=Host(`api.localhost`) && PathPrefix(`/api/finance`)
    - traefik.http.routers.finance.entrypoints=web
    - traefik.http.routers.finance.service=finance-service
    - traefik.http.services.finance-service.loadbalancer.server.port=3014
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      eventstore:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1024M
    restart: unless-stopped
  hr:
    build:
      context: .
      dockerfile: ./infrastructure/docker/services/universal-service.Dockerfile
      args:
        SERVICE_NAME: hr
        SERVICE_PORT: 3015
    container_name: vextrus-hr
    environment:
      NODE_ENV: development
      APP_PORT: 3015
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: vextrus
      DATABASE_PASSWORD: vextrus_dev_2024
      DATABASE_NAME: vextrus_hr
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: vextrus_redis_2024
      KAFKA_BROKERS: kafka:9093
      KAFKA_CLIENT_ID: hr-service
      KAFKA_CONSUMER_GROUP: hr-consumer
      OTEL_EXPORTER_OTLP_ENDPOINT: http://signoz-otel-collector:4318
      OTEL_SERVICE_NAME: hr-service
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_LOGS_EXPORTER: otlp
    ports:
    - 3015:3015
    networks:
    - vextrus-network
    labels:
    - traefik.enable=true
    - traefik.http.routers.hr.rule=Host(`api.localhost`) && PathPrefix(`/api/hr`)
    - traefik.http.routers.hr.entrypoints=web
    - traefik.http.routers.hr.service=hr-service
    - traefik.http.services.hr-service.loadbalancer.server.port=3015
    depends_on:
    - postgres
    - redis
    - kafka
    restart: unless-stopped
  organization:
    build:
      context: .
      dockerfile: ./infrastructure/docker/templates/node-service-production.Dockerfile
      args:
        SERVICE_NAME: organization
        SERVICE_PORT: 3016
        NODE_VERSION: 20
    image: vextrus-erp/organization:${VERSION:-latest}
    container_name: vextrus-organization
    command: sh -c "cd /app/services/organization && node dist/main.js"
    environment:
      NODE_ENV: development
      APP_PORT: 3016
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: vextrus
      DATABASE_PASSWORD: vextrus_dev_2024
      DATABASE_NAME: vextrus_organization
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: vextrus_redis_2024
      KAFKA_BROKERS: kafka:9093
      KAFKA_CLIENT_ID: organization-service
      KAFKA_CONSUMER_GROUP: organization-consumer
      OTEL_EXPORTER_OTLP_ENDPOINT: http://signoz-otel-collector:4318
      OTEL_SERVICE_NAME: organization-service
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_LOGS_EXPORTER: otlp
    ports:
    - 3016:3016
    networks:
    - vextrus-network
    labels:
    - traefik.enable=true
    - traefik.http.routers.organization.rule=Host(`api.localhost`) && PathPrefix(`/api/organization`)
    - traefik.http.routers.organization.entrypoints=web
    - traefik.http.routers.organization.service=organization-service
    - traefik.http.services.organization-service.loadbalancer.server.port=3016
    depends_on:
    - postgres
    - redis
    - kafka
    restart: unless-stopped
  project-management:
    build:
      context: .
      dockerfile: ./infrastructure/docker/services/universal-service.Dockerfile
      args:
        SERVICE_NAME: project-management
        SERVICE_PORT: 3017
    container_name: vextrus-project-management
    environment:
      NODE_ENV: development
      APP_PORT: 3017
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: vextrus
      DATABASE_PASSWORD: vextrus_dev_2024
      DATABASE_NAME: vextrus_project
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: vextrus_redis_2024
      KAFKA_BROKERS: kafka:9093
      KAFKA_CLIENT_ID: project-service
      KAFKA_CONSUMER_GROUP: project-consumer
      OTEL_EXPORTER_OTLP_ENDPOINT: http://signoz-otel-collector:4318
      OTEL_SERVICE_NAME: project-management-service
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_LOGS_EXPORTER: otlp
    ports:
    - 3017:3017
    networks:
    - vextrus-network
    labels:
    - traefik.enable=true
    - traefik.http.routers.project.rule=Host(`api.localhost`) && PathPrefix(`/api/project`)
    - traefik.http.routers.project.entrypoints=web
    - traefik.http.routers.project.service=project-service
    - traefik.http.services.project-service.loadbalancer.server.port=3017
    depends_on:
    - postgres
    - redis
    - kafka
    restart: unless-stopped
  scm:
    build:
      context: .
      dockerfile: ./infrastructure/docker/services/universal-service.Dockerfile
      args:
        SERVICE_NAME: scm
        SERVICE_PORT: 3018
    container_name: vextrus-scm
    environment:
      NODE_ENV: development
      APP_PORT: 3018
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: vextrus
      DATABASE_PASSWORD: vextrus_dev_2024
      DATABASE_NAME: vextrus_scm
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: vextrus_redis_2024
      KAFKA_BROKERS: kafka:9093
      KAFKA_CLIENT_ID: scm-service
      KAFKA_CONSUMER_GROUP: scm-consumer
      OTEL_EXPORTER_OTLP_ENDPOINT: http://signoz-otel-collector:4318
      OTEL_SERVICE_NAME: scm-service
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_LOGS_EXPORTER: otlp
    ports:
    - 3018:3018
    networks:
    - vextrus-network
    labels:
    - traefik.enable=true
    - traefik.http.routers.scm.rule=Host(`api.localhost`) && PathPrefix(`/api/scm`)
    - traefik.http.routers.scm.entrypoints=web
    - traefik.http.routers.scm.service=scm-service
    - traefik.http.services.scm-service.loadbalancer.server.port=3018
    depends_on:
    - postgres
    - redis
    - kafka
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: vextrus-prometheus
    volumes:
      - ./infrastructure/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - vextrus-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.1.5
    container_name: vextrus-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=vextrus_grafana_2024
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_SERVER_ROOT_URL=http://localhost:3500
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/docker/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3500:3000"
    networks:
      - vextrus-network
    depends_on:
      - prometheus
    restart: unless-stopped

  mailhog:
    image: mailhog/mailhog:latest
    container_name: vextrus-mailhog
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - vextrus-network
    restart: unless-stopped

  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    image: vextrus-erp/web:${VERSION:-latest}
    container_name: vextrus-web
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://api.localhost/graphql
      NEXT_PUBLIC_WS_URL: ws://api.localhost/graphql
      NEXT_TELEMETRY_DISABLED: 1
      PORT: 3000
      HOSTNAME: "0.0.0.0"
    ports:
      - "3000:3000"
    networks:
      - vextrus-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.web.rule=Host(`web.localhost`)
      - traefik.http.routers.web.entrypoints=web
      - traefik.http.routers.web.service=web-service
      - traefik.http.services.web-service.loadbalancer.server.port=3000
    depends_on:
      - api-gateway
      - traefik
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})\" || exit 1"]
      interval: 30s
      timeout: 10s
      start_period: 40s
      retries: 3
    restart: unless-stopped

networks:
  vextrus-network:
    driver: bridge
volumes:
  postgres_data: null
  redis_data: null
  kafka_data: null
  eventstore_data: null
  eventstore_logs: null
  zookeeper_data: null
  zookeeper_logs: null
  signoz_clickhouse_data: null
  signoz_query_data: null
  verdaccio_data: null
  minio_data: null
  elasticsearch_data: null
  rabbitmq_data: null
  prometheus_data: null
  grafana_data: null
